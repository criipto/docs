import * as jose from 'jose';

async function generateKeys() {
  try {
    // Generate RSA key pair (public and private keys)
    const { publicKey, privateKey } = await jose.generateKeyPair('RS256');
    // Export the public key to JWK format
    const jwk = await jose.exportJWK(publicKey);
    const kid = await jose.calculateJwkThumbprint(jwk)
    const jwks = { 
      keys: [
        {
          ...jwk,
          kid,
          use: 'sig',
        }
      ]
    }
    // Log the JWKS (public key in JWK Set format)
    console.log('JWK Set (Public Key):', JSON.stringify(jwks, null, 2));
    // Your private key here. Ensure to store your private key in a secure environment.
    console.log('Private Key:', privateKey);
    return { publicKey, privateKey, jwks, kid };
  } catch (error) {
    console.error(error);
    throw error;
  }
}

const {privateKey, kid} = await generateKeys();

import crypto from 'node:crypto';
import * as jose from 'jose';

async function generateJWT(signingKey) {
  try {
    const jti = crypto.randomBytes(32).toString('hex');
    const jwt = await new jose.SignJWT({jti})
      .setProtectedHeader({ alg: 'RS256', kid: 'YOUR_KID' })
      .setIssuedAt()
      .setIssuer('CLIENT_ID')
      .setSubject('CLIENT_ID')
      .setAudience('YOUR_CRIIPTO_DOMAIN')
      .setExpirationTime('5m')
      .sign(signingKey);
    console.log('JWT:', jwt);
    return jwt;
  } catch (error) {
    console.error('Error generating JWT:', error.message);
    throw error;
  }
}

const jwt = await generateJWT(privateKey);
console.log(jwt);